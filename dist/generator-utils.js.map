{"version":3,"sources":["../lib/index.js"],"names":[],"mappings":"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","file":"generator-utils.js","sourcesContent":["/**\n * Creates a new generator yielding all in-order combinations of values from\n * the given generators. All values from all generators will be read, so do not\n * use this with infinite generators.\n *\n * @example\n *\n *   toArray(combine([range(0, 1), range(4, 5)]))\n *   // [[0, 4], [0, 5], [1, 4], [1, 5]]\n *\n * @param {{next: (function(): {value: ?T, done: boolean})}[]} generators\n * @returns {{next: (function(): {value: ?T, done: boolean})}}\n * @template T\n */\nexport function combine(generators) {\n  switch (generators.length) {\n    case 0:\n      return {\n        next() {\n          return { value: null, done: true };\n        }\n      };\n\n    case 1:\n      return map(generators[0], value => [value]);\n\n    case 2:\n      let left = generators[0];\n      let allRight = toArray(generators[1]);\n      let leftIteration;\n      let rightOffset = 0;\n\n      return {\n        next: function next() {\n          if (!leftIteration) {\n            leftIteration = left.next();\n          }\n\n          if (leftIteration.done) {\n            return leftIteration;\n          }\n\n          let nextRight = allRight[rightOffset++];\n\n          if (nextRight) {\n            return { value: [leftIteration.value, nextRight], done: false };\n          } else {\n            leftIteration = null;\n            rightOffset = 0;\n            return next();\n          }\n        }\n      };\n\n    default:\n      return map(\n        combine([generators[0], combine(generators.slice(1))]),\n        ([head, tail]) => [head, ...tail]\n      );\n  }\n}\n\n/**\n * Returns a generator yielding all the values from the given generators in\n * order. If any generators are infinite generators none of the values from\n * subsequent generators will be read.\n *\n * @example\n *\n *   toArray(concat([range(0, 1), range(4, 5)]))\n *   // [0, 1, 4, 5]\n *\n * @param {{next: (function(): {value: ?T, done: boolean})}[]} generators\n * @returns {{next: (function(): {value: ?T, done: boolean})}}\n * @template T\n */\nexport function concat(generators) {\n  switch (generators.length) {\n    case 0:\n      return {\n        next() {\n          return { value: null, done: true };\n        }\n      };\n\n    case 1:\n      return generators[0];\n\n    default:\n      let offset = 0;\n      return {\n        next: function next() {\n          if (offset >= generators.length) {\n            return { value: null, done: true };\n          }\n\n          let iteration = generators[offset].next();\n\n          if (iteration.done) {\n            offset++;\n            return next();\n          }\n\n          return iteration;\n        }\n      };\n  }\n}\n\n/**\n * Returns a generator that yields values from another generator passing a\n * predicate. This may be used with infinite generators, though care should be\n * taken to ensure that the predicate does not return false for all values.\n *\n * @example\n *\n *   toArray(filter(range(0, 5), x => x % 2 === 0))\n *   // [0, 2, 4]\n *\n * @param {{next: (function(): {value: ?T, done: boolean})}} generator\n * @param {function(T): boolean} predicate\n * @returns {{next: (function(): {value: ?T, done: boolean})}}\n * @template T\n */\nexport function filter(generator, predicate) {\n  return {\n    next: function next() {\n      let iteration = generator.next();\n\n      if (iteration.done) {\n        return iteration;\n      }\n\n      if (!predicate(iteration.value)) {\n        return next();\n      }\n\n      return iteration;\n    }\n  };\n}\n\n/**\n * Combines `filter` and `map` in one transform. Instead of returning false,\n * filtering is done by calling the `skip` function passed as the second\n * argument to transform.\n *\n * @example\n *\n *   toArray(filter(range(0, 5), (x, skip) => (x % 2 === 0) ? skip() : x * x))\n *   // [1, 9, 25]\n *\n * @param {{next: (function(): {value: ?T, done: boolean})}} generator\n * @param {function(T, function()): ?T} transform\n * @returns {{next: (function(): {value: ?T, done: boolean})}}\n * @template T\n */\nexport function filterMap(generator, transform) {\n  return {\n    next: function next() {\n      var iteration = generator.next();\n\n      if (iteration.done) {\n        return iteration;\n      }\n\n      let skipped = false;\n      function skip() { skipped = true; }\n\n      iteration.value = transform(iteration.value, skip);\n\n      if (skipped) {\n        return next();\n      }\n\n      return iteration;\n    }\n  };\n}\n\n/**\n * Makes a generator from a generator producing other generators.\n *\n * @example\n *\n *   toArray(flatten(fromArray([range(2, 5), range(6,7))))\n *   // [2,3,4,5,6,7]\n *\n * @param {{next: (function(): {value: ?{next: (function(): {value: ?T, done: boolean})}, done: boolean})}} generator\n * @returns {{next: (function(): {value: ?T, done: boolean})}}\n * @template T\n */\nexport function flatten(generator) {\n  let needsGenerator = true;\n  let subGenerator;\n  return {\n    next() {\n      for (;;) {\n        if (needsGenerator) {\n          let subIterator = generator.next();\n          if (subIterator.done) {\n            return { value: null, done: true };\n          }\n          subGenerator = subIterator.value;\n          needsGenerator = false;\n        }\n        let iteration = subGenerator.next();\n        if (iteration.done) {\n          needsGenerator = true;\n        } else {\n          return iteration;\n        }\n      }\n    }\n  };\n}\n\n/**\n * Calls a function for each value in a generator.\n *\n * @example\n *\n *   forEach(range(1, 4), console.log)\n *   // prints \"1\\n2\\n3\\n4\\n\"\n *\n * @param {{next: (function(): {value: ?T, done: boolean})}} generator\n * @param {function(T)} iterator\n * @template T\n */\nexport function forEach(generator, iterator) {\n  for (let iteration; !(iteration = generator.next()).done;) {\n    iterator(iteration.value);\n  }\n}\n\n/**\n * Returns a generator yielding the values from the given array in order.\n *\n * @example\n *\n *   toArray(fromArray([1, 2, 3]))\n *   // [1, 2, 3]\n *\n * @param {T[]} array\n * @returns {{next: (function(): {value: ?T, done: boolean})}}\n * @template T\n * @private\n */\nexport function fromArray(array) {\n  let offset = 0;\n  return {\n    next() {\n      if (offset < array.length) {\n        return { value: array[offset++], done: false };\n      } else {\n        return { value: null, done: true };\n      }\n    }\n  };\n}\n\n/**\n * Maps one generator to another by passing all values through a transformer.\n *\n * @example\n *\n *   toArray(map(range(2, 5), x => x * 2))\n *   // [4, 6, 8, 10]\n *\n * @param {{next: (function(): {value: ?T, done: boolean})}} generator\n * @param {function(T, function()=): U} transformer\n * @returns {{next: (function(): {value: ?U, done: boolean})}}\n * @template T\n * @template U\n */\nexport function map(generator, transformer) {\n  return {\n    next() {\n      let iteration = generator.next();\n\n      if (iteration.done) {\n        return iteration;\n      }\n\n      return { value: transformer(iteration.value), done: false };\n    }\n  };\n}\n\n/**\n * Returns a generator yielding values from min up to and including max.\n *\n * @example\n *\n *   toArray(range(8, 10))\n *   // [8, 9, 10]\n *\n * @param {number} min\n * @param {number} max\n * @returns {{next: (function(): {value: ?number, done: boolean})}}\n */\nexport function range(min, max) {\n  let i = min;\n  return {\n    next() {\n      if (i <= max) {\n        return { value: i++, done: false };\n      } else {\n        return { value: null, done: true };\n      }\n    }\n  };\n}\n\n/**\n * Returns up to the first count values of a generator.\n *\n * @example\n *\n *   take(range(10, 20), 3)\n *   // [10, 11, 12]\n *\n * @param generator\n * @param count\n * @returns {Array}\n */\nexport function take(generator, count) {\n  let result = [];\n\n  while (count-- > 0) {\n    let iteration = generator.next();\n\n    if (iteration.done) {\n      break;\n    }\n\n    result.push(iteration.value);\n  }\n\n  return result;\n}\n\n/**\n * Reads all values from a generator and returns an array containing them. Be\n * careful not to use this with infinite generators, as it will never return and\n * your program will eventually run out of memory.\n *\n * @example\n *\n *   toArray(range(7, 9))\n *   // [7, 8, 9]\n *\n * @param {{next: (function(): {value: ?T, done: boolean})}} generator\n * @returns {T[]}\n * @template T\n */\nexport function toArray(generator) {\n  let results = [];\n  forEach(generator, value => results.push(value));\n  return results;\n}\n"]}